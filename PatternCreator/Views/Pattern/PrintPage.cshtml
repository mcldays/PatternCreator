@using PatternCreator.Models
@model object[]

@{
    ViewBag.Title = "Вывод на печать";
}
@Styles.Render("~/bundles/Print-css")
@Styles.Render("~/Content/slimselect.min.css")
@Scripts.Render("~/Scripts/slimselect.min.js")
@Styles.Render("~/Content/bootstrap-datetimepicker.min.css")
@Scripts.Render("~/Scripts/bootstrap-datetimepicker.min.js")
@Scripts.Render("~/Scripts/bootstrap-datetimepicker.ru.js")
<div id="BlockOne">
    <div class="TextAligment">
        <span class="PrintDescription">
            Выберите необходимое количество шаблонов и человек / компаний, <br> для которых будет производиться печать:
        </span>
    </div>

    <div class="chosePatternAligment">

        <div id="patternAligment">
            <div class="dropdown selectStyle">
                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownTemplates" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Добавить шаблон
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownTemplates">
                    @foreach (var template in (ViewBag.Pictures as List<PictureModel>).Where(t=>t.Id!=29))
                    {
                        <button class="dropdown-item" type="button" template-id="@template.Id">@template.Name</button>
                    }
                    
                </div>
            </div>



        </div>
        <span class="PrintDescription">Выбранные шаблоны:</span>
        <div id="acceptedTemplates"></div>


        <div class="input-users-wrap">
            <div class="dropdown organisationAligment">
                <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownOgranization" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Добавить компанию
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownOgranization">
                    @foreach (var company in ViewBag.Companies)
                    {
                        <button class="dropdown-item" type="button" company-id="@company.CompanyId">@company.CompanyName</button>
                    }
                </div>
            </div>

            <button data-toggle="modal" data-target="#openModal" class="AddUserPrint">
                Добавить пользователя
            </button>
        </div>
        <span class="PrintDescription">Выбранные пользователи, организации:</span>
        <div id="acceptedUsers"></div>

        <div class="checkbox-wrap">
            <label class="checkbox-label">
                <input type="checkbox" id="substrate" />
                <span class="checkbox-span">Подложка</span>
            </label>
        </div>

        <div id="photosForPrint"></div>

        <div id="manageButtons">
            <button class="BlueButton" id="startProcessPhotos">
                @Ajax.ActionLink("Сопоставить", "GetDocuments", "Print", null, new AjaxOptions { UpdateTargetId = "documentresult", OnSuccess = "$('#templateAccept').modal('show');", OnBegin = "onBegin" }, new { @class = "butttonTextStyle h-100" })

            </button>

            <button class="BlueButton" id="PrintBut">
                <span class="butttonTextStyle">Печать</span>
            </button>
            <button class="BlueButton" style="display: none" id="Redact" data-toggle="modal" data-target="#templateAccept">
                <span class="butttonTextStyle">Редактировать</span>
            </button>
            @*<button class="BlueButton">
            <span class="butttonTextStyle">Сохранить в PDF</span>
        </button>*@
        </div>
    </div>
</div>
<div id="openModal" tabindex="-1" role="dialog" aria-labelledby="openModalLabel" aria-hidden="true" class="modal fade-scale">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Добавить пользователя</h3>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @using (Ajax.BeginForm("PrintParital", new AjaxOptions { UpdateTargetId = "results", OnSuccess = "OnSuccess" }))
                {
                    <div class="AddUserModal">
                        <div class="FindUsersControl">
                            <input type="text" name="name" id="FindUsers" class="ControlText" placeholder="Поиск по пользователям">
                            <!-- <span class="ControlText">Поиск по пользователям</span> -->
                            <button type="button" class="FindButton">
                                <img src="/Resourses/svg/magnifying-glass (3).svg" class="AddUserImg">
                            </button>
                        </div>
                    </div>
                }
                <div id="results"></div>
            </div>
        </div>
    </div>
</div>
<div id="templateAccept" tabindex="-1" role="dialog" aria-labelledby="templateAcceptLabel" aria-hidden="true" class="modal fade-scale">
    <div class="modal-dialog mx-auto" style="max-width: 97%;">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Данные для заполнения</h3>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="container-fluid" id="documentresult">
                    
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    @Scripts.Render("~/bundles/Print-js")
    <script>
        
        function onBegin(xhr, request) {
            request.url = "@Url.Action("GetDocuments", "Print")?data=" + getData();
        }

        function findUsers(t) {
            var userId = "";
            var finded = "";
            var filter = t.val().toLowerCase().replace(/ /g, '');
            $("tbody>tr").each(function() {
                var vals = $(this).children("td");

                finded = $(vals[1]).text();
                finded += $(vals[2]).text();
                finded += $(vals[3]).text();

                if (!finded.toLowerCase().includes(filter)) {
                    var tr = $(this);
                    tr.hide();

                } else {
                    var tr = $(this);
                    tr.show();
                }
            });
        };

        $(document).on("input",
            "#FindUsers",
            function() {
                findUsers($(this));
            });

        $(document).on("click",
            ".FindButton",
            function() {
                findUsers($(this).prev());
            });

        function OnSuccess() {
            findUsers($("#FindUsers"));
        }

        $(document).on("click",
            ".AddUserPrint",
            function() {
                $(".modal-body>form").submit();
            });

        $(document).on("click",
            ".DeleteButton",
            function() {
                $(this).parent().remove();
            });

        $("button[template-id]").on("click",
            function() {
                const tId = this.getAttribute('template-id');
                if (!$(".template").toArray().map(e => { return e.getAttribute('tId') }).includes(tId)) {
                    const newTemplate = $(`<div class="Pattern template" tId=${tId}>
                        <span class="PrintDescription">${this.innerText}</span>
                        <button class="DeleteButton">
                            <img src="/Resourses/svg/delete.svg" class="deleteImage">
                        </button>
                    </div>`);
                    $("#acceptedTemplates").append(newTemplate);
                }
            });

        $("button[company-id]").on("click",
            function() {
                const cId = this.getAttribute('company-id');
                if (!$(".company").toArray().map(e => { return e.getAttribute('cId') }).includes(cId)) {
                    const newCompany = $(`<div class="Pattern company" cId=${cId}>
                        <span class="PrintDescription">${this.innerText}</span>
                        <button class="DeleteButton">
                            <img src="/Resourses/svg/delete.svg" class="deleteImage">
                        </button>
                    </div>`);
                    $("#acceptedUsers").append(newCompany);
                }
            });

        $(document).on("click",
            ".AddButton",
            function() {
                const user = $(this).parent().parent().children();
                const uId = user[0].innerText;
                const allName = user[1].innerText + " " + user[2].innerText + " " + user[3].innerText;
                if (!$(".user").toArray().map(e => { return e.getAttribute('uId') }).includes(uId)) {
                    const newUser = $(`<div class="Pattern user" uId=${uId}>
                        <span class="PrintDescription">${allName}</span>
                        <button class="DeleteButton">
                            <img src="/Resourses/svg/delete.svg" class="deleteImage">
                        </button>
                    </div>`);
                    $("#acceptedUsers").append(newUser);
                }
            });

        function onSuccessPhoto(result) {

            //const photos = result.split("<separator>");

            //for (let photo in photos) {
            $("#photosForPrint")
                .html(
                    result);
            //}
            $('#Redact').show();
            $("#preloader-id").addClass("done");
        }

        

        function getData() {
            return JSON.stringify({
                "users": $(".user").toArray().map(e => e.getAttribute("uId")),
                "companies": $(".company").toArray().map(e => e.getAttribute("cId")),
                "templates": $(".template").toArray().map(e => e.getAttribute("tId")),
                "substrate": [+$("#substrate").prop("checked")]
            });
        }

        $("#PrintBut").click(() => {
            var images = $(document.getElementById("photosForPrint").getElementsByClassName('photo'));
            var bufferStr = '';

          
            $(".photo-wrap>.printdocument").each(function() {
                bufferStr += this.innerHTML;
            });

            printJS({
                printable: bufferStr,
                type: 'raw-html',
                style: '* {margin: 0px; padding: 0px;}'
            });
        });

        $(document).on("click",
            ".photo-delete",
            function () {
                if ($(this).data('docs') !== undefined) {
                    var ids = $(this).data("docs");
                    $(ids).each(function () {
                        if (this !== 0) {
                            $('.photo-delete[data-id="' + this + '"]').parent().remove();
                        }
                        
                    });
                }
                $(this).parent().remove();
            });
        function validElement(element) {
            
            if (!$(element).valid()) {
                $(element).closest('.input-group').addClass("val-error");
                return false;
            }
            $(element).closest('.input-group').removeClass("val-error");
            return true;
        }

        var redact = false;
        $(document).on('click',
            "#getDocs",
            function () {
                var valid = true;
                $("#tableRedact").find(".reqfields").each(function () {
                   
                    if (!$(this).is('div')&&!validElement(this))
                        valid = false;
                });
                if (!valid) {
                    alert("Не все поля заполнены");
                    return;
                }
                let data = [];
                var specialty = $("[name='SpecialtyName']");
                var organization = $("[name='OrganizationName']");
                var datestart = $("[name='DateStart']");
                var date = $("[name='Date']");
                var educationtime = $("[name='EducationTime']");
                var protocolname = $("[name='ProtocolName']");
                var fields = $("[name='WriteFields']");
                
                $('#preloader-id').removeClass('done');
                $('#templateAccept').modal('hide');
                
                
                for (let i = 0; i < specialty.length; i++) {
                    let fieldarray = $(fields[i]).find('[name="HandWriteField"]').toArray().map(t => t.value);
                    data = data.concat({
                        template: $(specialty[i]).closest('tr').data('template'),
                        uid: $(specialty[i]).closest('tr').data('userid'),
                        specialty: $(specialty[i]).val(),
                        organization: $(organization[i]).val(),
                        datestart: $(datestart[i]).val(),
                        date: $(date[i]).val(),
                        educationtime: $(educationtime[i]).val(),
                        protocolname: $(protocolname[i]).val(),
                        fields: fieldarray
                    });
                }
               
                $.post(
                    '@Url.Action("SaveDocuments", "Print")',
                    {
                        data: JSON.stringify(data),
                        substrate: $("#substrate").prop("checked"),
                        redact:false
            },
                    onSuccessPhoto,
                    "html");

            });
        $(document).on("change", "#substrate", function() {
            $('.substrated').fadeToggle(300);
            $('.onlysubstrate').toggleClass('printdocument');
            $('.notsubstrate').toggleClass('printdocument');

        });
        $(document).on("change",
            ".needValid",
            function () {
                validElement(this);
            });
        $('.reqfields').addClass("needValid");
        $(document).on("input",
            ".needValid",
            function () {
                validElement(this);
            });
        $(document).on("click", ".createProtocol", function () {
            var valid = true;
            $(this).closest('tr').find(".reqfields:not([name='ProtocolName'])").each(function () {
                   
                if (!$(this).is('div')&&!validElement(this))
                    valid = false;
            });
            if (!valid) {
                alert("Заполните даты, выберите программу и организацию, чтобы получить номер протокола!");
                return;
            }
            var parent_tr = $(this).closest('tr');
            var target = parent_tr.find("[name='ProtocolName']");
            let model = {
                date: parent_tr.find("input[name='Date']").val(),
                specialty: parent_tr.find("select[name='SpecialtyName']").val()
            }
            $.get(
                '@Url.Action("CreateProtocol","Print")',
                { data: JSON.stringify(model) },
                function (data, textStatus, jqXHR) {
                    if (textStatus === "success") {
                        target.val(data).trigger("change");
                    }
                });
        });
        
        $(document).on("click", ".btn.show", function () {
            
            if ($(this).text() === "∨")
                $(this).html("∧");
            else
                $(this).html("∨");
            $(this).closest("tr").next().fadeToggle(300);
        });
        $(document).on("click", ".btn.remove", function () {
            var temp = $(this).data('template');
            var comp = $(this).data('company');
            var uid = $(this).data('userid');
            $("tr[data-template='" + temp + "'][data-company='" + comp + "'][data-userid='" + uid + "']").remove();
        });
        $(document).on("click", ".allcompany>.btn", function () {
            var company = $(this).closest('tr').data('company');
            var temp = $(this).closest('tr').data('template');
            var elem = $(this).closest('td').find('input, select');
            var fieldname = elem.attr('name');
            var value = elem.val();
            if (elem.is('select')) {
                
                if (fieldname === "SpecialtyName") {
                    selectSpecialty.filter(t => t.elem.data('company') === elem.data('company')).forEach(function(item,i,arr) {
                        item.slim.set(value);
                    });
                }
                if (fieldname === "OrganizationName") {
                    selectOrganization.filter(t => t.elem.data('company') === elem.data('company')).forEach(function (item, i, arr) {
                        item.slim.set(value);
                    });
                }
            } else {
                $("tr[data-template='" + temp + "'][data-company='" + company + "']").each(function () {
                    if ($(this).children().attr("colspan")==8) {
                        return;
                    }
                    $(this).find("[name='" + fieldname + "']").val(value).trigger("change");
                });
            }
        });
    </script>
}